<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on weiweng的博客</title>
    <link>https://weiweng.github.io/blog/categories/mysql/</link>
    <description>Recent content in Mysql on weiweng的博客</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 22 Apr 2020 08:08:00 +0800</lastBuildDate>
    <atom:link href="https://weiweng.github.io/blog/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>mysql|分库分表</title>
      <link>https://weiweng.github.io/blog/post/2020-04-22-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</link>
      <pubDate>Wed, 22 Apr 2020 08:08:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-04-22-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</guid>
      <description>&lt;h1 id=&#34;为什么需要分&#34;&gt;为什么需要分?&lt;/h1&gt;&#xA;&lt;p&gt;关系型数据库本身比较容易成为系统瓶颈，单机存储容量、连接数、处理能力都有限。当单表的数据量达到1000W或100G以后，由于查询维度较多，即使添加从库、优化索引，做很多操作时性能仍下降严重。此时就要考虑对其进行切分了，切分的目的就在于减少数据库的负担，缩短查询时间。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mysql|使用注意</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-Mysql%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E9%A1%B9%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 14 Mar 2020 03:10:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-Mysql%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E9%A1%B9%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h2 id=&#34;设计&#34;&gt;设计&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;设计的合理性，能否容忍冗余字段，尽量一张表，方便开发&lt;/li&gt;&#xA;&lt;li&gt;考虑使用记录表，记录一些查询和修改的记录信息&lt;/li&gt;&#xA;&lt;li&gt;考虑业务的使用情况，设置相关索引，加速查询和修改&lt;/li&gt;&#xA;&lt;li&gt;分库分表的合理性&lt;/li&gt;&#xA;&lt;li&gt;存储量的预估&lt;/li&gt;&#xA;&lt;li&gt;业务访问量的预估，是否会造成db的压力&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;使用时间戳存储时间&lt;/li&gt;&#xA;&lt;li&gt;使用datetime等时间格式，注意时区问题，注意设置数据库的时区&lt;/li&gt;&#xA;&lt;li&gt;字符集问题注意&lt;/li&gt;&#xA;&lt;li&gt;根据业务的qps和服务器的性能，合理设置连接池大小和链接时间、读取写入时间、超时时间&lt;/li&gt;&#xA;&lt;li&gt;修改和删除数据时一定要加where语句&lt;/li&gt;&#xA;&lt;li&gt;修改和删除时一定要先使用limit测试&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>mysql|explain</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-explain%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 14 Mar 2020 03:09:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-explain%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;explain&#34;&gt;explain&lt;/h2&gt;&#xA;&lt;p&gt;explain显示了mysql如何使用索引来处理select语句以及连接表，可以帮助选择更好的索引和写出更优化的查询语句。&lt;/p&gt;&#xA;&lt;h2 id=&#34;字段&#34;&gt;字段&lt;/h2&gt;&#xA;&lt;p&gt;expain出来的信息有10列，分别是id、select_type、table、type、possible_keys、key、key_len、ref、rows、Extra&lt;/p&gt;</description>
    </item>
    <item>
      <title>mysql|导入导出相关</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 14 Mar 2020 03:08:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E7%9B%B8%E5%85%B3/</guid>
      <description>导入导出相关</description>
    </item>
    <item>
      <title>mysql|临时表相关</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-%E4%B8%B4%E6%97%B6%E8%A1%A8%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 14 Mar 2020 03:07:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-%E4%B8%B4%E6%97%B6%E8%A1%A8%E7%9B%B8%E5%85%B3/</guid>
      <description>临时表相关</description>
    </item>
    <item>
      <title>mysql|Group相关</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-Group%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 14 Mar 2020 03:06:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-Group%E7%9B%B8%E5%85%B3/</guid>
      <description>Group相关</description>
    </item>
    <item>
      <title>mysql|join</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-join%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 14 Mar 2020 03:04:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-join%E7%9B%B8%E5%85%B3/</guid>
      <description>&lt;h2 id=&#34;join流程分类&#34;&gt;join流程分类&lt;/h2&gt;&#xA;&lt;h3 id=&#34;index-nested-loop-join&#34;&gt;Index Nested-Loop Join&lt;/h3&gt;&#xA;&lt;p&gt;分析语句&lt;code&gt;select * from t1 straight_join t2 on (t1.a=t2.a);&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;上述语句中t2的a字段存在索引，则join流程如下&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从表 t1 中读入一行数据 R；&lt;/li&gt;&#xA;&lt;li&gt;从数据行 R 中，取出 a 字段到表 t2 里去查找；&lt;/li&gt;&#xA;&lt;li&gt;取出表 t2 中满足条件的行(使用索引)，跟 R 组成一行，作为结果集的一部分；&lt;/li&gt;&#xA;&lt;li&gt;重复执行步骤 1 到 3，直到表 t1 的末尾循环结束。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这个过程是先遍历表 t1，然后根据从表 t1 中取出的每行数据中的 a 值，去表 t2 中查找满足条件的记录。在形式上，这个过程就跟我们写程序时的嵌套查询类似，并且可以用上被驱动表的索引，所以我们称之为&lt;code&gt;Index Nested-Loop Join&lt;/code&gt;，简称 NLJ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mysql|全表扫描问题</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-%E5%85%A8%E8%A1%A8%E6%89%AB%E6%8F%8F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 14 Mar 2020 03:03:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-%E5%85%A8%E8%A1%A8%E6%89%AB%E6%8F%8F%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h2 id=&#34;全表扫描流程&#34;&gt;全表扫描流程&lt;/h2&gt;&#xA;&lt;p&gt;InnoDB 的数据是保存在主键索引上的，所以全表扫描实际上是直接扫描表 t 的主键索引。这条查询语句由于没有其他的判断条件，所以查到的每一行都可以直接放到结果集里面，然后返回给客户端。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mysql|删除流程</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-%E5%88%A0%E9%99%A4%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Sat, 14 Mar 2020 03:02:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-%E5%88%A0%E9%99%A4%E6%B5%81%E7%A8%8B/</guid>
      <description>&lt;h2 id=&#34;数据删除&#34;&gt;数据删除&lt;/h2&gt;&#xA;&lt;p&gt;删除整个表的时候，可以使用 drop table 命令回收表空间。但是，我们遇到的更多的删除数据的场景是删除某些行，这时就遇到了这样的问题：表中的数据被删除了，但是表空间却没有被回收。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mysql|排序方法</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 14 Mar 2020 02:59:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/</guid>
      <description>排序方法</description>
    </item>
    <item>
      <title>mysql|统计比较</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-%E7%BB%9F%E8%AE%A1%E6%AF%94%E8%BE%83/</link>
      <pubDate>Sat, 14 Mar 2020 02:58:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-%E7%BB%9F%E8%AE%A1%E6%AF%94%E8%BE%83/</guid>
      <description>&lt;h2 id=&#34;count效率比较&#34;&gt;count效率比较&lt;/h2&gt;&#xA;&lt;p&gt;在不同的 MySQL 引擎中，&lt;code&gt;count(*)&lt;/code&gt;有不同的实现方式。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 &lt;code&gt;count(*)&lt;/code&gt; 的时候会直接返回这个数，效率很高；&lt;/li&gt;&#xA;&lt;li&gt;InnoDB 引擎就麻烦了，它执行 &lt;code&gt;count(*)&lt;/code&gt; 的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这里需要注意的是，我们在这里讨论的是没有过滤条件的&lt;code&gt;count(*)&lt;/code&gt;，如果加了where条件的话，MyISAM 表也是不能返回得这么快的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mysql|日志类型</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-%E6%97%A5%E5%BF%97%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 14 Mar 2020 02:57:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-%E6%97%A5%E5%BF%97%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;mysql日志类型&#34;&gt;MySQL日志类型&lt;/h1&gt;&#xA;&lt;p&gt;MySQL数据库共有四种类型的日志：Error Log、General Query Log、Slow Query Log 和 Binary Log&lt;/p&gt;&#xA;&lt;h2 id=&#34;错误日志&#34;&gt;错误日志&lt;/h2&gt;&#xA;&lt;p&gt;Error Log 即 错误日志，主要是记录 mysqld 发生的一些错误。&lt;/p&gt;&#xA;&lt;h2 id=&#34;查询日志&#34;&gt;查询日志&lt;/h2&gt;&#xA;&lt;p&gt;General Query Log 即 一般查询日志，记录 mysqld 正在做的事情，如客户端的连接和断开、来自客户端每条 Sql Statement 记录信息；因为查询日志会记录用户所有的操作，其中还包括增删改查等信息，如果在高并发的环境下会产生大量的信息，导致不必要的磁盘IO，会影响mysql的性能。该类型日志影响性能，所以默认是关闭的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mysql|一致性读</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-%E4%B8%80%E8%87%B4%E6%80%A7%E8%AF%BB/</link>
      <pubDate>Sat, 14 Mar 2020 02:55:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-%E4%B8%80%E8%87%B4%E6%80%A7%E8%AF%BB/</guid>
      <description>&lt;h2 id=&#34;视图&#34;&gt;视图&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;view,它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;另一个是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复读）隔离级别的实现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mysql|锁相关</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-%E9%94%81%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 14 Mar 2020 02:53:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-%E9%94%81%E7%9B%B8%E5%85%B3/</guid>
      <description>&lt;h3 id=&#34;全局锁ftwrl&#34;&gt;全局锁(FTWRL)&lt;/h3&gt;&#xA;&lt;p&gt;全局锁就是对整个数据库实例加锁。&lt;/p&gt;&#xA;&lt;p&gt;MySQL 提供了一个加全局读锁的方法，命令是 &lt;code&gt;Flush tables with read lock&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mysql|索引相关 </title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 14 Mar 2020 02:52:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3/</guid>
      <description>&lt;h2 id=&#34;索引&#34;&gt;索引&lt;/h2&gt;&#xA;&lt;p&gt;索引的出现是为了提高数据的查询效率，就行书本的目录一样，mysql中索引的实现是基于存储引擎的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;&#xA;&lt;h3 id=&#34;哈希表&#34;&gt;哈希表&lt;/h3&gt;&#xA;&lt;p&gt;说明:以键值存储的数据结构 问题:哈希冲突的处理 范围:适用于等只查询的场景&lt;/p&gt;</description>
    </item>
    <item>
      <title>mysql|更新流程解析</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sat, 14 Mar 2020 02:51:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h2 id=&#34;redo-log&#34;&gt;redo log&lt;/h2&gt;&#xA;&lt;p&gt;当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做，&lt;/p&gt;</description>
    </item>
    <item>
      <title>mysql|查询流程解析</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sat, 14 Mar 2020 02:50:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h2 id=&#34;mysql基本架构图&#34;&gt;Mysql基本架构图&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;        &lt;img class=&#34;mx-auto&#34; alt=&#34;mysql结构图&#34; src=&#34;img_0.png&#34; /&gt;   &#xA;    &lt;/p&gt;&#xA;&lt;p&gt;MySQL 可以分为 Server 层和存储引擎层两部分。Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mysql|InnoDB的ACID</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-InnoDB%E7%9A%84ACID/</link>
      <pubDate>Sat, 14 Mar 2020 02:49:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-InnoDB%E7%9A%84ACID/</guid>
      <description>&lt;h3 id=&#34;基本概念&#34;&gt;基本概念&lt;/h3&gt;&#xA;&lt;h4 id=&#34;acid&#34;&gt;ACID&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原子性（Atomicity）：一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。&lt;/li&gt;&#xA;&lt;li&gt;一致性（consistency）：数据库总是从一个一致性的状态转换到另一个一致性的状态。（其实原子性和隔离性间接的保证了一致性）&lt;/li&gt;&#xA;&lt;li&gt;隔离性（isolation）：通常来说，一个事务所做的修改在最终提交以前，对其他事务是不可见的。&lt;/li&gt;&#xA;&lt;li&gt;持久性（durability）：一旦事务提交，则其所做的修改就会永久保存到数据库中。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;方便记忆秘诀——&amp;ldquo;一次缘分&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>mysql|知识点收集</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%94%B6%E9%9B%86/</link>
      <pubDate>Sat, 14 Mar 2020 02:47:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%94%B6%E9%9B%86/</guid>
      <description>&lt;h3 id=&#34;知识点收集&#34;&gt;知识点收集&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-union-all-与-union-的区别&#34;&gt;1. UNION ALL 与 UNION 的区别&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;UNION和UNION ALL关键字都是将两个结果集合并为一个。&lt;/li&gt;&#xA;&lt;li&gt;UNION在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。 而UNION ALL只是简单的将两个结果合并后就返回。&lt;/li&gt;&#xA;&lt;li&gt;由于UNION需要排序去重，所以 UNION ALL 的效率比 UNION 好很多。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;2-truncate-与-delete-区别&#34;&gt;2. TRUNCATE 与 DELETE 区别&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;TRUNCATE 是DDL语句，而 DELETE 是DML语句。&lt;/li&gt;&#xA;&lt;li&gt;TRUNCATE 是先把整张表drop调，然后重建该表。而 DELETE 是一行一行的删除，所以 TRUNCATE 的速度肯定比 DELETE 速度快。&lt;/li&gt;&#xA;&lt;li&gt;TRUNCATE 不可以回滚，DELETE 可以。&lt;/li&gt;&#xA;&lt;li&gt;TRUNCATE 执行结果只是返回0 rows affected，可以解释为没有返回结果。&lt;/li&gt;&#xA;&lt;li&gt;TRUNCATE 会重置水平线（自增长列起始位），DELETE 不会。&lt;/li&gt;&#xA;&lt;li&gt;TRUNCATE 只能清理整张表，DELETE 可以按照条件删除。&lt;/li&gt;&#xA;&lt;li&gt;一般情景下，TRUNCATE性能比DELETE好一点。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;3-timestamp-与-datetime-的区别&#34;&gt;3. TIMESTAMP 与 DATETIME 的区别&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;相同点&lt;/p&gt;</description>
    </item>
    <item>
      <title>mysql|基本命令使用</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 14 Mar 2020 02:46:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</guid>
      <description>基本命令使用</description>
    </item>
    <item>
      <title>mysql|基础认知</title>
      <link>https://weiweng.github.io/blog/post/2020-03-14-%E5%9F%BA%E7%A1%80%E8%AE%A4%E7%9F%A5/</link>
      <pubDate>Sat, 14 Mar 2020 02:45:00 +0800</pubDate>
      <guid>https://weiweng.github.io/blog/post/2020-03-14-%E5%9F%BA%E7%A1%80%E8%AE%A4%E7%9F%A5/</guid>
      <description>基础认知</description>
    </item>
  </channel>
</rss>
