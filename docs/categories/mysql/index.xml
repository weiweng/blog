<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on weiweng的博客</title>
    <link>https://weiweng.github.io/categories/mysql/</link>
    <description>Recent content in mysql on weiweng的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 22 Apr 2020 08:08:00 +0800</lastBuildDate><atom:link href="https://weiweng.github.io/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>mysql|分库分表</title>
      <link>https://weiweng.github.io/post/2020-04-22-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</link>
      <pubDate>Wed, 22 Apr 2020 08:08:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-04-22-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</guid>
      <description>为什么需要分? 关系型数据库本身比较容易成为系统瓶颈，单机存储容量、连接数、处理能力都有限。当单表的数据量达到1000W或100G以后，由于查询维度较多，即使添加</description>
    </item>
    
    <item>
      <title>mysql|使用注意</title>
      <link>https://weiweng.github.io/post/2020-03-14-Mysql%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E9%A1%B9%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 14 Mar 2020 03:10:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-Mysql%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E9%A1%B9%E6%80%BB%E7%BB%93/</guid>
      <description>设计 设计的合理性，能否容忍冗余字段，尽量一张表，方便开发 考虑使用记录表，记录一些查询和修改的记录信息 考虑业务的使用情况，设置相关索引，加速查询和修改 分库分表的合</description>
    </item>
    
    <item>
      <title>mysql|explain</title>
      <link>https://weiweng.github.io/post/2020-03-14-explain%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 14 Mar 2020 03:09:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-explain%E4%BD%BF%E7%94%A8/</guid>
      <description>explain explain显示了mysql如何使用索引来处理select语句以及连接表，可以帮助选择更好的索引和写出更优化的查询语句。 字段 expain出来的信息有10列，</description>
    </item>
    
    <item>
      <title>mysql|导入导出相关</title>
      <link>https://weiweng.github.io/post/2020-03-14-%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 14 Mar 2020 03:08:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E7%9B%B8%E5%85%B3/</guid>
      <description>导入导出相关</description>
    </item>
    
    <item>
      <title>mysql|临时表相关</title>
      <link>https://weiweng.github.io/post/2020-03-14-%E4%B8%B4%E6%97%B6%E8%A1%A8%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 14 Mar 2020 03:07:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-%E4%B8%B4%E6%97%B6%E8%A1%A8%E7%9B%B8%E5%85%B3/</guid>
      <description>临时表相关</description>
    </item>
    
    <item>
      <title>mysql|Group相关</title>
      <link>https://weiweng.github.io/post/2020-03-14-Group%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 14 Mar 2020 03:06:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-Group%E7%9B%B8%E5%85%B3/</guid>
      <description>Group相关</description>
    </item>
    
    <item>
      <title>mysql|join</title>
      <link>https://weiweng.github.io/post/2020-03-14-join%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 14 Mar 2020 03:04:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-join%E7%9B%B8%E5%85%B3/</guid>
      <description>join流程分类 Index Nested-Loop Join 分析语句select * from t1 straight_join t2 on (t1.a=t2.a); 上述语句中t2的a字段存在索引，则join流程如下 从表 t1 中读入一行数据 R； 从数据行 R 中，取出 a 字段到表 t2</description>
    </item>
    
    <item>
      <title>mysql|全表扫描问题</title>
      <link>https://weiweng.github.io/post/2020-03-14-%E5%85%A8%E8%A1%A8%E6%89%AB%E6%8F%8F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 14 Mar 2020 03:03:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-%E5%85%A8%E8%A1%A8%E6%89%AB%E6%8F%8F%E9%97%AE%E9%A2%98/</guid>
      <description>全表扫描流程 InnoDB 的数据是保存在主键索引上的，所以全表扫描实际上是直接扫描表 t 的主键索引。这条查询语句由于没有其他的判断条件，所以查到的每一行都可以直接放到结果集里</description>
    </item>
    
    <item>
      <title>mysql|删除流程</title>
      <link>https://weiweng.github.io/post/2020-03-14-%E5%88%A0%E9%99%A4%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Sat, 14 Mar 2020 03:02:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-%E5%88%A0%E9%99%A4%E6%B5%81%E7%A8%8B/</guid>
      <description>数据删除 删除整个表的时候，可以使用 drop table 命令回收表空间。但是，我们遇到的更多的删除数据的场景是删除某些行，这时就遇到了这样的问题：表中的数据被删除了，但是表空间却</description>
    </item>
    
    <item>
      <title>mysql|排序方法</title>
      <link>https://weiweng.github.io/post/2020-03-14-%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 14 Mar 2020 02:59:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/</guid>
      <description>排序方法</description>
    </item>
    
    <item>
      <title>mysql|统计比较</title>
      <link>https://weiweng.github.io/post/2020-03-14-%E7%BB%9F%E8%AE%A1%E6%AF%94%E8%BE%83/</link>
      <pubDate>Sat, 14 Mar 2020 02:58:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-%E7%BB%9F%E8%AE%A1%E6%AF%94%E8%BE%83/</guid>
      <description>count效率比较 在不同的 MySQL 引擎中，count(*)有不同的实现方式。 MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高； InnoDB 引擎就麻</description>
    </item>
    
    <item>
      <title>mysql|日志类型</title>
      <link>https://weiweng.github.io/post/2020-03-14-%E6%97%A5%E5%BF%97%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 14 Mar 2020 02:57:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-%E6%97%A5%E5%BF%97%E7%B1%BB%E5%9E%8B/</guid>
      <description>MySQL日志类型 MySQL数据库共有四种类型的日志：Error Log、General Query Log、Slow Query Log 和 Binary Log 错误日志 Error Log 即 错误日志，主要是记录 mysqld 发生的一些</description>
    </item>
    
    <item>
      <title>mysql|一致性读</title>
      <link>https://weiweng.github.io/post/2020-03-14-%E4%B8%80%E8%87%B4%E6%80%A7%E8%AF%BB/</link>
      <pubDate>Sat, 14 Mar 2020 02:55:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-%E4%B8%80%E8%87%B4%E6%80%A7%E8%AF%BB/</guid>
      <description>视图 view,它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。 另一个是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read</description>
    </item>
    
    <item>
      <title>mysql|锁相关</title>
      <link>https://weiweng.github.io/post/2020-03-14-%E9%94%81%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 14 Mar 2020 02:53:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-%E9%94%81%E7%9B%B8%E5%85%B3/</guid>
      <description>全局锁(FTWRL) 全局锁就是对整个数据库实例加锁。 MySQL 提供了一个加全局读锁的方法，命令是 Flush tables with read lock 当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他</description>
    </item>
    
    <item>
      <title>mysql|索引相关 </title>
      <link>https://weiweng.github.io/post/2020-03-14-%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 14 Mar 2020 02:52:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3/</guid>
      <description>索引 索引的出现是为了提高数据的查询效率，就行书本的目录一样，mysql中索引的实现是基于存储引擎的。 实现 哈希表 说明:以键值存储的数据结构 问题:哈希冲突的处理 范围</description>
    </item>
    
    <item>
      <title>mysql|更新流程解析</title>
      <link>https://weiweng.github.io/post/2020-03-14-%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sat, 14 Mar 2020 02:51:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/</guid>
      <description>redo log 当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操</description>
    </item>
    
    <item>
      <title>mysql|查询流程解析</title>
      <link>https://weiweng.github.io/post/2020-03-14-%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sat, 14 Mar 2020 02:50:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/</guid>
      <description>Mysql基本架构图 MySQL 可以分为 Server 层和存储引擎层两部分。Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函</description>
    </item>
    
    <item>
      <title>mysql|InnoDB的ACID</title>
      <link>https://weiweng.github.io/post/2020-03-14-InnoDB%E7%9A%84ACID/</link>
      <pubDate>Sat, 14 Mar 2020 02:49:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-InnoDB%E7%9A%84ACID/</guid>
      <description>基本概念 ACID 原子性（Atomicity）：一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。 一致性（consi</description>
    </item>
    
    <item>
      <title>mysql|知识点收集</title>
      <link>https://weiweng.github.io/post/2020-03-14-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%94%B6%E9%9B%86/</link>
      <pubDate>Sat, 14 Mar 2020 02:47:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%94%B6%E9%9B%86/</guid>
      <description>知识点收集 1. UNION ALL 与 UNION 的区别 UNION和UNION ALL关键字都是将两个结果集合并为一个。 UNION在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结</description>
    </item>
    
    <item>
      <title>mysql|基本命令使用</title>
      <link>https://weiweng.github.io/post/2020-03-14-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 14 Mar 2020 02:46:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</guid>
      <description>基本命令使用</description>
    </item>
    
    <item>
      <title>mysql|基础认知</title>
      <link>https://weiweng.github.io/post/2020-03-14-%E5%9F%BA%E7%A1%80%E8%AE%A4%E7%9F%A5/</link>
      <pubDate>Sat, 14 Mar 2020 02:45:00 +0800</pubDate>
      
      <guid>https://weiweng.github.io/post/2020-03-14-%E5%9F%BA%E7%A1%80%E8%AE%A4%E7%9F%A5/</guid>
      <description>基础认知</description>
    </item>
    
  </channel>
</rss>
